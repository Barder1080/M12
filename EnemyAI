using UnityEngine;
using UnityEngine.AI;
using System.Collections;

public class EnemyAI : MonoBehaviour
{
    public Transform player;

    public float detectionRange = 10f;
    public float lostSightTime = 3f;
    public float wanderRadius = 20f;
    public float waitTimeAfterLosingPlayer = 2f;

    public float viewAngle = 120f;
    public float crouchDetectionMultiplier = 0.5f;
    public float lookAroundDuration = 3f;
    public float lookAroundSpeed = 120f;

    public float normalSpeed = 3.5f;
    public float chaseSpeed = 6f;

    public float killDistance = 0.5f;

    public GameObject gameOverScreen;

    public Camera playerCamera;
    public Camera jumpscareCamera;
    public GameObject playerModel;

    public LayerMask obstacleMask;

    private NavMeshAgent agent;
    private Animator animator;
    private PlayerController playerController;

    private float lastTimeSeenPlayer = Mathf.NegativeInfinity;
    private bool isSearching;
    private bool isLookingAround;
    private bool isGameOver = false;
    private Vector3 lastKnownPosition;

    private Coroutine lookAroundRoutine;

    void Start()
    {
        agent = GetComponent<NavMeshAgent>();
        animator = GetComponentInChildren<Animator>();

        if (player != null)
            playerController = player.GetComponent<PlayerController>();

        agent.speed = normalSpeed;
        WanderToNewPosition();
    }

    void Update()
    {
        if (isGameOver) return;

        float currentDetectionRange = detectionRange;

        if (playerController != null && playerController.isCrouching)
            currentDetectionRange *= crouchDetectionMultiplier;

        float distanceToPlayer = Vector3.Distance(transform.position, player.position);
        Vector3 directionToPlayer = (player.position - transform.position).normalized;
        float angleToPlayer = Vector3.Angle(transform.forward, directionToPlayer);

        bool canSeePlayer = false;
        if (distanceToPlayer < currentDetectionRange && angleToPlayer < viewAngle / 2f)
        {
            if (!Physics.Raycast(transform.position + Vector3.up, directionToPlayer, distanceToPlayer, obstacleMask))
            {
                canSeePlayer = true;
            }
        }

        if (canSeePlayer)
        {
            lastTimeSeenPlayer = Time.time;
            lastKnownPosition = player.position;
            agent.SetDestination(player.position);
            agent.speed = chaseSpeed;
            isSearching = false;

            if (lookAroundRoutine != null)
            {
                StopCoroutine(lookAroundRoutine);
                lookAroundRoutine = null;
                isLookingAround = false;
            }
        }
        else if (Time.time - lastTimeSeenPlayer < lostSightTime)
        {
            if (!isSearching)
            {
                agent.SetDestination(lastKnownPosition);
                agent.speed = normalSpeed;
                isSearching = true;
            }

            if (!isLookingAround && Vector3.Distance(transform.position, lastKnownPosition) < 1f)
            {
                lookAroundRoutine = StartCoroutine(LookAroundCoroutine());
            }
        }
        else
        {
            agent.speed = normalSpeed;

            if (!agent.hasPath || agent.remainingDistance < 0.5f)
            {
                WanderToNewPosition();
            }
        }

        if (!isGameOver)
            animator.SetFloat("Speed", agent.velocity.magnitude);

        if (Vector3.Distance(transform.position, player.position) < killDistance)
        {
            KillPlayer();
        }
    }

    void WanderToNewPosition()
    {
        Vector3 randomDirection = Random.insideUnitSphere * wanderRadius;
        randomDirection += transform.position;
        if (NavMesh.SamplePosition(randomDirection, out NavMeshHit navHit, wanderRadius, NavMesh.AllAreas))
        {
            agent.SetDestination(navHit.position);
        }
    }

    IEnumerator LookAroundCoroutine()
    {
        isLookingAround = true;
        agent.ResetPath();

        float timeElapsed = 0f;
        while (timeElapsed < lookAroundDuration)
        {
            transform.Rotate(Vector3.up, lookAroundSpeed * Time.deltaTime);

            Vector3 directionToPlayer = (player.position - transform.position).normalized;
            float distanceToPlayer = Vector3.Distance(transform.position, player.position);
            float angleToPlayer = Vector3.Angle(transform.forward, directionToPlayer);

            float detection = detectionRange;
            if (playerController != null && playerController.isCrouching)
                detection *= crouchDetectionMultiplier;

            if (distanceToPlayer < detection && angleToPlayer < viewAngle / 2f)
            {
                if (!Physics.Raycast(transform.position + Vector3.up, directionToPlayer, distanceToPlayer, obstacleMask))
                {
                    agent.speed = chaseSpeed;
                    isLookingAround = false;
                    agent.SetDestination(player.position);
                    yield break;
                }
            }

            timeElapsed += Time.deltaTime;
            yield return null;
        }

        isLookingAround = false;
        isSearching = false;
        WanderToNewPosition();
    }

    void KillPlayer()
    {
        isGameOver = true;
        agent.isStopped = true;

        if (animator != null)
            animator.SetTrigger("Jumpscare");

        if (playerController != null)
            playerController.enabled = false;

        if (playerCamera != null)
            playerCamera.gameObject.SetActive(false);

        if (jumpscareCamera != null)
            jumpscareCamera.gameObject.SetActive(true);

        if (playerModel != null)
            playerModel.SetActive(false);

        StartCoroutine(ShowGameOverDelayed());
    }

    IEnumerator ShowGameOverDelayed()
    {
        yield return new WaitForSeconds(2.5f); // Ajusta según duración del jumpscare

        if (gameOverScreen != null)
            gameOverScreen.SetActive(true);

        Cursor.lockState = CursorLockMode.None;
        Cursor.visible = true;
    }
}
